package GBall.client;

import java.awt.event.*;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class World
{
	// TODO: remove hardcoded values
	private static final int LISTEN_PORT = 1338;
	DatagramSocket m_socket;
	JSONParser m_parser;

	private double m_lastTime = System.currentTimeMillis();
	private double m_actualFps = 0.0;
	private final GameWindow m_gameWindow = new GameWindow();

	private static class WorldSingletonHolder
	{
		public static final World instance = new World();
	}

	public static World getInstance()
	{
		return WorldSingletonHolder.instance;
	}

	private World()
	{
		try
		{
			m_socket = new DatagramSocket(LISTEN_PORT);
		}
		catch (SocketException e)
		{
			e.printStackTrace();
			System.exit(-1);
		}
		m_parser = new JSONParser();
	}

	public void process()
	{
		initPlayers();

		while (true)
		{
			// Main loop
			if (newFrame())
			{
				parseState(receiveState()); // TODO: make this asynchronous
				EntityManager.getInstance().updatePositions();
				EntityManager.getInstance().checkBorderCollisions(Const.DISPLAY_WIDTH, Const.DISPLAY_HEIGHT);
				EntityManager.getInstance().checkShipCollisions();
				m_gameWindow.repaint();
			}
		}
	}

	private JSONArray receiveState()
	{
		JSONArray retval = null;
		// Receive state from server
		try
		{
			byte[] data = new byte[2048]; // 2kB should be larger than anything we'll receive
			DatagramPacket packet = new DatagramPacket(data, data.length);
			m_socket.receive(packet);

			// TODO: interpret state data
			//System.out.println(new String(packet.getData(), packet.getOffset(), packet.getLength()));
			retval = (JSONArray) m_parser.parse(new String(packet.getData(), packet.getOffset(), packet.getLength()));

		}
		catch (IOException e)
		{
			e.printStackTrace();
			System.exit(-1);
		}
		catch (ParseException e)
		{
			e.printStackTrace();
			System.exit(-1);
		}
		return retval;
	}
	
	private void parseState(JSONArray state)
	{
		List<GameEntity> entities = EntityManager.getState();
		int serverEntities = (int)state.get(0);
		for(int i = 1; i <= entities.size(); ++i)
		{
			// TODO: interpolation perhaps
			
		}
	}

	private boolean newFrame()
	{
		double currentTime = System.currentTimeMillis();
		double delta = currentTime - m_lastTime;
		boolean rv = (delta > Const.FRAME_INCREMENT);
		if (rv)
		{
			m_lastTime += Const.FRAME_INCREMENT;
			if (delta > 10 * Const.FRAME_INCREMENT)
			{
				m_lastTime = currentTime;
			}
			m_actualFps = 1000 / delta;
		}
		return rv;
	}

	private void initPlayers()
	{
	// CAVEAT: It's imperative that objects are created in the same order on the client as on the server.
		// Ball
				EntityManager.getInstance().addBall(new Vector2D(Const.BALL_X, Const.BALL_Y), new Vector2D(0.0, 0.0));
		
		// Team 1
		EntityManager.getInstance().addShip(new Vector2D(Const.START_TEAM1_SHIP1_X, Const.START_TEAM1_SHIP1_Y), new Vector2D(0.0, 0.0), new Vector2D(1.0, 0.0), Const.TEAM1_COLOR,
				new KeyConfig(KeyEvent.VK_A, KeyEvent.VK_D, KeyEvent.VK_S, KeyEvent.VK_W));

		EntityManager.getInstance().addShip(new Vector2D(Const.START_TEAM1_SHIP2_X, Const.START_TEAM1_SHIP2_Y), new Vector2D(0.0, 0.0), new Vector2D(1.0, 0.0), Const.TEAM1_COLOR,
				new KeyConfig(KeyEvent.VK_F, KeyEvent.VK_H, KeyEvent.VK_G, KeyEvent.VK_T));

		// Team 2
		EntityManager.getInstance().addShip(new Vector2D(Const.START_TEAM2_SHIP1_X, Const.START_TEAM2_SHIP1_Y), new Vector2D(0.0, 0.0), new Vector2D(-1.0, 0.0), Const.TEAM2_COLOR,
				new KeyConfig(KeyEvent.VK_LEFT, KeyEvent.VK_RIGHT, KeyEvent.VK_DOWN, KeyEvent.VK_UP));

		EntityManager.getInstance().addShip(new Vector2D(Const.START_TEAM2_SHIP2_X, Const.START_TEAM2_SHIP2_Y), new Vector2D(0.0, 0.0), new Vector2D(-1.0, 0.0), Const.TEAM2_COLOR,
				new KeyConfig(KeyEvent.VK_J, KeyEvent.VK_L, KeyEvent.VK_K, KeyEvent.VK_I));

	}

	public double getActualFps()
	{

		return m_actualFps;
	}

	public void addKeyListener(KeyListener k)
	{
		m_gameWindow.addKeyListener(k);
	}

}