package GBall.server;

import java.awt.event.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.List;
import java.util.ListIterator;

import org.json.simple.JSONObject;

public class World
{	
	// TODO: remove hardcoded values
	InetAddress m_clientAddress;
	final int CLIENTPORT;
	DatagramSocket m_socket;

	private static class WorldSingletonHolder
	{
		public static final World	instance	= new World();
	}

	public static World getInstance()
	{
		return WorldSingletonHolder.instance;
	}

	private double				m_lastTime		= System.currentTimeMillis();
	private double				m_actualFps		= 0.0;

	private final GameWindow	m_gameWindow	= new GameWindow();

	private World()
	{
		// TODO: remove hardcoded values
		CLIENTPORT = 1338;
		try
		{
			m_clientAddress = InetAddress.getByName("localhost");
			m_socket = new DatagramSocket();
		}
		catch(IOException e)
		{
			e.printStackTrace();
			System.exit(-1);
		}
	}

	public void process()
	{
		initPlayers();

		while (true)
		{
			// Main loop
			if (newFrame())
			{
				EntityManager.getInstance().updatePositions();
				EntityManager.getInstance().checkBorderCollisions(Const.DISPLAY_WIDTH, Const.DISPLAY_HEIGHT);
				EntityManager.getInstance().checkShipCollisions();
				sendState();
				m_gameWindow.repaint();
			}
		}
	}

	private void sendState()
	{
		try
		{
			// Marshall state
			JSONObject<Integer, JSONObject> worldState = new JSONObject<Integer, JSONObject>();
			
			List<GameEntity> entities = EntityManager.getState();
			for(int i = 0; i < entities.size(); ++i)
			{
				// TODO: only update changed objects
				worldState.put(i, entities.get(i).getJSON());
			}
			
			// TODO: send to every client
			
			byte[] data = worldState.toJSONString().getBytes();
			//byte[] data = "banana transfer!".getBytes();
			DatagramPacket pack = new DatagramPacket(data, data.length, m_clientAddress, CLIENTPORT);
			m_socket.send(pack);
		}
		catch (IOException e)
		{ // TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private boolean newFrame()
	{
		double currentTime = System.currentTimeMillis();
		double delta = currentTime - m_lastTime;
		boolean rv = (delta > Const.FRAME_INCREMENT);
		if (rv)
		{
			m_lastTime += Const.FRAME_INCREMENT;
			if (delta > 10 * Const.FRAME_INCREMENT)
			{
				m_lastTime = currentTime;
			}
			m_actualFps = 1000 / delta;
		}
		return rv;
	}

	private void initPlayers()
	{
	// Caveat! It's imperative that objects are created in the same order on the client as on the server.
		// Ball
				EntityManager.getInstance().addBall(new Vector2D(Const.BALL_X, Const.BALL_Y), new Vector2D(0.0, 0.0));
		
		// Team 1
		EntityManager.getInstance().addShip(new Vector2D(Const.START_TEAM1_SHIP1_X, Const.START_TEAM1_SHIP1_Y),
				new Vector2D(0.0, 0.0), new Vector2D(1.0, 0.0), Const.TEAM1_COLOR,
				new KeyConfig(KeyEvent.VK_A, KeyEvent.VK_D, KeyEvent.VK_S, KeyEvent.VK_W));

		EntityManager.getInstance().addShip(new Vector2D(Const.START_TEAM1_SHIP2_X, Const.START_TEAM1_SHIP2_Y),
				new Vector2D(0.0, 0.0), new Vector2D(1.0, 0.0), Const.TEAM1_COLOR,
				new KeyConfig(KeyEvent.VK_F, KeyEvent.VK_H, KeyEvent.VK_G, KeyEvent.VK_T));

		// Team 2
		EntityManager.getInstance().addShip(new Vector2D(Const.START_TEAM2_SHIP1_X, Const.START_TEAM2_SHIP1_Y),
				new Vector2D(0.0, 0.0), new Vector2D(-1.0, 0.0), Const.TEAM2_COLOR,
				new KeyConfig(KeyEvent.VK_LEFT, KeyEvent.VK_RIGHT, KeyEvent.VK_DOWN, KeyEvent.VK_UP));

		EntityManager.getInstance().addShip(new Vector2D(Const.START_TEAM2_SHIP2_X, Const.START_TEAM2_SHIP2_Y),
				new Vector2D(0.0, 0.0), new Vector2D(-1.0, 0.0), Const.TEAM2_COLOR,
				new KeyConfig(KeyEvent.VK_J, KeyEvent.VK_L, KeyEvent.VK_K, KeyEvent.VK_I));
	}

	public double getActualFps()
	{

		return m_actualFps;
	}

	public void addKeyListener(KeyListener k)
	{
		m_gameWindow.addKeyListener(k);
	}

}